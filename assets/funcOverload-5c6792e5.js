var i=(n,o,t)=>{if(!o.has(n))throw TypeError("Cannot "+t)};var p=(n,o,t)=>(i(n,o,"read from private field"),t?t.call(n):o.get(n)),s=(n,o,t)=>{if(o.has(n))throw TypeError("Cannot add the same private member more than once");o instanceof WeakSet?o.add(n):o.set(n,t)};var e;class f{constructor(){s(this,e,new Map)}addImpl(...o){const t=o.pop();if(typeof t!="function")throw new Error("last argument must be a function");const r=o.join(",");p(this,e).set(r,t)}overload(...o){const t=o.map(a=>typeof a).join(","),r=p(this,e).get(t);if(!r)throw new Error(`no implementation for ${t}`);return r.apply(this,o)}}e=new WeakMap;export{f as F};
